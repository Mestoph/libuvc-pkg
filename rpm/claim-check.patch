--- libuvc-0.0.5/include/libuvc/libuvc_internal.h.old	2016-07-11 17:56:24.000000000 +0100
+++ libuvc-0.0.5/include/libuvc/libuvc_internal.h	2016-11-01 23:27:13.505724675 +0000
@@ -269,6 +271,7 @@
   uvc_stream_handle_t *streams;
   /** Whether the camera is an iSight that sends one header per frame */
   uint8_t is_isight;
+  uint32_t claimed;
 };
 
 /** Context within which we communicate with devices */
--- libuvc-0.0.5/src/device.c.old	2016-11-01 23:17:20.129583675 +0000
+++ libuvc-0.0.5/src/device.c	2016-11-01 23:39:04.037349845 +0000
@@ -842,17 +853,25 @@
  * @param idx UVC interface index
  */
 uvc_error_t uvc_claim_if(uvc_device_handle_t *devh, int idx) {
-  int ret;
+  int ret = UVC_SUCCESS;
 
   UVC_ENTER();
 
+  if ( devh->claimed & ( 1 << idx )) {
+    fprintf ( stderr, "attempt to claim already-claimed interface %d\n", idx );
+    UVC_EXIT(ret);
+    return ret;
+  }
+
   /* Tell libusb to detach any active kernel drivers. libusb will keep track of whether
    * it found a kernel driver for this interface. */
   ret = libusb_detach_kernel_driver(devh->usb_devh, idx);
 
   if (ret == UVC_SUCCESS || ret == LIBUSB_ERROR_NOT_FOUND || ret == LIBUSB_ERROR_NOT_SUPPORTED) {
     UVC_DEBUG("claiming interface %d", idx);
-    ret = libusb_claim_interface(devh->usb_devh, idx);
+    if (!( ret = libusb_claim_interface(devh->usb_devh, idx))) {
+      devh->claimed |= ( 1 << idx );
+    }
   } else {
     UVC_DEBUG("not claiming interface %d: unable to detach kernel driver (%s)",
               idx, uvc_strerror(ret));
@@ -870,10 +889,16 @@
  * @param idx UVC interface index
  */
 uvc_error_t uvc_release_if(uvc_device_handle_t *devh, int idx) {
-  int ret;
+  int ret = UVC_SUCCESS;
 
   UVC_ENTER();
   UVC_DEBUG("releasing interface %d", idx);
+  if (!( devh->claimed & ( 1 << idx ))) {
+    fprintf ( stderr, "attempt to release unclaimed interface %d\n", idx );
+    UVC_EXIT(ret);
+    return ret;
+  }
+
   /* libusb_release_interface *should* reset the alternate setting to the first available,
      but sometimes (e.g. on Darwin) it doesn't. Thus, we do it explicitly here.
      This is needed to de-initialize certain cameras. */
@@ -881,6 +906,7 @@
   ret = libusb_release_interface(devh->usb_devh, idx);
 
   if (UVC_SUCCESS == ret) {
+    devh->claimed &= ~( 1 << idx );
     /* Reattach any kernel drivers that were disabled when we claimed this interface */
     ret = libusb_attach_kernel_driver(devh->usb_devh, idx);
 
